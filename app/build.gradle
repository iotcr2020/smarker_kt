apply plugin: 'com.android.application'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.anders.SMarker"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 122
        versionName "3.10"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.javaCompileProvider.get().doLast {
            runAllatori(variant)
        }
    }
}

/* IMPORTANT :
 * Be careful when update dependencies, different version library may caused error */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // google support library ---------------------------------------------------------------------
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:support-v13:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation 'com.android.support:support-vector-drawable:28.0.0'

    // google maps library ------------------------------------------------------------------------
    implementation 'com.google.android.gms:play-services-maps:16.1.0'
    implementation('com.google.android.libraries.places:places:1.0.0') {
        exclude module: 'glide'
    }

    // google gson --------------------------------------------------------------------------------
    implementation 'com.google.code.gson:gson:2.8.4'

    // third party dependencies -------------------------------------------------------------------
    implementation 'com.balysv:material-ripple:1.0.2'                  // ripple effect
    implementation 'com.github.bumptech.glide:glide:3.7.0'             // image loader
    implementation 'com.wdullaer:materialdatetimepicker:3.2.0'         // date & time picker
    implementation 'com.mikhaellopez:circularimageview:3.2.0'          // circle image view
    implementation 'com.github.pchmn:MaterialChipsInput:1.0.5'         // material chip
    implementation 'com.hootsuite.android:nachos:1.1.1'                // material chips
    implementation 'com.google.android:flexbox:0.3.2'                  // google flexible box
    implementation 'com.crystal:crystalrangeseekbar:1.1.3'             // range seek bar

    // firebase library
    implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation('com.google.firebase:firebase-ads:17.2.0') {
        exclude module: 'play-services-measurement-base'
    }

    // rest API
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'

    // database
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    implementation 'com.android.support:support-v4:28.0.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'

    implementation "gun0912.ted:tedpermission:2.2.3"
    implementation 'com.soundcloud.android:android-crop:1.0.1@aar'


    //fcm
    implementation 'com.google.firebase:firebase-messaging:17.3.4'
    implementation 'com.google.firebase:firebase-core:16.0.4'

}
apply plugin: 'com.google.gms.google-services'

def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        expand(classesRoot: variant.javaCompileProvider.get().destinationDir,
               kotlinRoot: "${buildDir}/tmp/kotlin-classes/${variant.name}",
               androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
               classpathJars: variant.javaCompileProvider.get().classpath.getAsPath(),
               logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").deleteDir()

    javaexec {
        main = 'com.allatori.Obfuscate'
        classpath = files("$rootDir/allatori/allatori.jar")
        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
    }

    new File("${variant.javaCompileProvider.get().destinationDir}").deleteDir()
    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").renameTo(new File("${variant.javaCompileProvider.get().destinationDir}"))
}